using Emgu.CV;
using Emgu.CV.Features2D;
using Emgu.CV.Structure;
using Emgu.CV.Util;
using Emgu.CV.Flann;
using Emgu.CV.Cuda;
using System.Runtime.InteropServices;
using Emgu.CV.CvEnum;
using Emgu.CV.OCR;
using Emgu.CV.ML;
using Emgu.CV.ML.MlEnum;
using Emgu.CV.Face;
using Emgu.CV.Stitching;
using Emgu.CV.Dnn;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Drawing;

namespace WinFormsApp1
{
    class Processing
    {
        public static List<float[]> ArrayTo2DList(Array array)
        {
            System.Collections.IEnumerator enumerator = array.GetEnumerator();
            int rows = array.GetLength(0);
            int cols = array.GetLength(1);
            List<float[]> list = new List<float[]>();
            List<float> temp = new List<float>();

            for (int i = 0; i < rows; i++)
            {
                temp.Clear();
                for (int j = 0; j < cols; j++)
                {
                    temp.Add(float.Parse(array.GetValue(i, j).ToString()));
                }
                list.Add(temp.ToArray());
            }
            return list;
        }
        public void ShowImport(PictureBox pictureBox1, string fileName)
        {
            int imgDefaultSizeWidth = pictureBox1.Width;
            int imgDefaultSizeHeight = pictureBox1.Height;
            if (!fileName.EndsWith(".mp4")) 
            { 
                Image<Bgr, byte> img = new Image<Bgr, byte>(fileName).Resize(imgDefaultSizeWidth, imgDefaultSizeHeight, Inter.Cubic);  // SIZE?
                pictureBox1.Image = img.ToBitmap();
            }
        }
        public void Process(PictureBox pictureBox1, string fileName)
        {
            //OpenCvSharp.VideoCapture capture = null;
            // String win1 = "Image"; //The name of the window
            // CvInvoke.NamedWindow(win1); //Create the window using the specific name

            VectorOfRect bboxes = new VectorOfRect(); // перенёс
            VectorOfFloat scores = new VectorOfFloat();
            VectorOfInt indices = new VectorOfInt();

            Net model = DnnInvoke.ReadNet("1_last_new2.weights", "1.cfg");

            List<string> classes = File.ReadAllLines("classes.txt").ToList();

            int imgDefaultSize = 416;
            
            

            if (fileName.EndsWith(".mp4"))
            {
                VideoCapture capture = new VideoCapture(fileName);
                // Loop through the frames of the video
                while (true)
                {
                    // Read the next frame from the video
                    Mat img = capture.QueryFrame();
                    //Mat img = new Mat();
                   // capture.Read(img);

                    // If the frame is null, we've reached the end of the video
                    if (img == null)
                    {
                        break;
                    }
                    //Image<Bgr, byte> img = frame.ToImage<Bgr,byte>().Resize(imgDefaultSize, imgDefaultSize, Inter.Cubic);
                   
                    
                    // Create a 4D blob from the frame and set it as the input to the DNN
                    Mat blob1 = DnnInvoke.BlobFromImage(img, 1 / 255.0, new Size(416,416), new MCvScalar(0, 0, 0), swapRB: true, crop: false);



                    // Extract the detected objects from the output
                    model.SetInput(blob1);
                    VectorOfMat vectorOfMat = new VectorOfMat();
                    model.Forward(vectorOfMat, model.UnconnectedOutLayersNames);

                    // отсюда перенёс
                    for (int k = 0; k < vectorOfMat.Size; k++)
                    {
                        var mat = vectorOfMat[k];
                        var data = ArrayTo2DList(mat.GetData());

                        for (int i = 0; i < data.Count; i++)
                        {
                            var row = data[i];
                            var rowsscores = row.Skip(5).ToArray();
                            var classId = rowsscores.ToList().IndexOf(rowsscores.Max());
                            var confidence = rowsscores[classId];

                            if (confidence > 0.1f)
                            {
                                var center_x = (int)(row[0] * img.Width);
                                var center_y = (int)(row[1] * img.Height);

                                var width = (int)(row[2] * img.Width);
                                var height = (int)(row[3] * img.Height);

                                var x = (int)(center_x - (width / 2));
                                var y = (int)(center_y - (height / 2));

                                bboxes.Push(new Rectangle[] { new Rectangle(x, y, width, height) });
                                indices.Push(new int[] { classId });
                                scores.Push(new float[] { confidence });
                            }
                        }
                    }
                    var idx = DnnInvoke.NMSBoxes(bboxes.ToArray(), scores.ToArray(), 0.1f, 0.3f); // Точность

                    var imgOutput = img.Clone();
                    for (int i = 0; i < idx.Length; i++)
                    {
                        int index = idx[i];
                        var bbox = bboxes[index];
                        imgOutput.ToImage<Bgr,byte>().Draw(bbox, new Bgr(0, 255, 0), 2);
                        CvInvoke.PutText(imgOutput, classes[indices[index]], new System.Drawing.Point(bbox.X, bbox.Y + 20),
                            FontFace.HersheySimplex, 0.7, new MCvScalar(0, 0, 255), 1);
                    }

                    pictureBox1.Image = imgOutput.ToBitmap() ;
                    
                }

              

                // Release the VideoCapture object and close the window
                capture.Dispose();
                CvInvoke.DestroyAllWindows();
            }
            else 
            {
                Image<Bgr, byte> img = new Image<Bgr, byte>(fileName).Resize(imgDefaultSize, imgDefaultSize, Inter.Cubic);// для фото  test(1-15)
                var blob = DnnInvoke.BlobFromImage(img, 1 / 255.0, swapRB: true, crop: false);

                model.SetInput(blob);
                VectorOfMat vectorOfMat = new VectorOfMat();
                model.Forward(vectorOfMat, model.UnconnectedOutLayersNames);

                // отсюда перенёс
                for (int k = 0; k < vectorOfMat.Size; k++)
                {
                    var mat = vectorOfMat[k];
                    var data = ArrayTo2DList(mat.GetData());

                    for (int i = 0; i < data.Count; i++)
                    {
                        var row = data[i];
                        var rowsscores = row.Skip(5).ToArray();
                        var classId = rowsscores.ToList().IndexOf(rowsscores.Max());
                        var confidence = rowsscores[classId];

                        if (confidence > 0.2f)
                        {
                            var center_x = (int)(row[0] * img.Width);
                            var center_y = (int)(row[1] * img.Height);

                            var width = (int)(row[2] * img.Width);
                            var height = (int)(row[3] * img.Height);

                            var x = (int)(center_x - (width / 2));
                            var y = (int)(center_y - (height / 2));

                            bboxes.Push(new Rectangle[] { new Rectangle(x, y, width, height) });
                            indices.Push(new int[] { classId });
                            scores.Push(new float[] { confidence });
                        }
                    }
                }
                var idx = DnnInvoke.NMSBoxes(bboxes.ToArray(), scores.ToArray(), 0.1f, 0.3f); // Точность

                var imgOutput = img.Clone();

                for (int i = 0; i < idx.Length; i++)
                {
                    int index = idx[i];
                    var bbox = bboxes[index];
                    imgOutput.Draw(bbox, new Bgr(0, 255, 0), 2);
                    CvInvoke.PutText(imgOutput, classes[indices[index]], new System.Drawing.Point(bbox.X, bbox.Y + 20),
                        FontFace.HersheySimplex, 0.7, new MCvScalar(0, 0, 255), 1);
                }

                pictureBox1.Image = imgOutput.ToBitmap();
            }
        }
            //Bitmap bitmap = new Bitmap(pictureBox1.Image);
            //pictureBox1.Image = bitmap;

            //Graphics graphics = Graphics.FromImage(bitmap);
            //Mat frame = new Mat();
            //pictureBox1.Image = frame.ToBitmap();
            //capture = new OpenCvSharp.VideoCapture(fileName);
            /*
            if (capture != null)
            {
                OpenCvSharp.Mat frame = new OpenCvSharp.Mat();
                capture.Read(frame);

                pictureBox1.Image = OpenCvSharp.Extensions.BitmapConverter.ToBitmap(frame); ;
                Emgu.CV.BackgroundSubtractorMOG2 backgroundSubtractor = new Emgu.CV.BackgroundSubtractorMOG2();

               // backgroundSubtractor = new Emgu.CV.BgSegm.BackgroundSubtractorGMG(200,20);
                //Application.Idle += Application_Idle;
            }
            */
            
    }
}
